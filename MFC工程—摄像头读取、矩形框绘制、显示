// Mat版本摄像头MFC工程Dlg.cpp : 实现文件
#include "stdafx.h"
#include "Mat版本摄像头MFC工程.h"
#include "Mat版本摄像头MFC工程Dlg.h"
#include "afxdialogex.h"
#include"opencv2/core/core.hpp"
#include"opencv2/highgui/highgui.hpp"
#include "highgui.h"
#include <iostream>
#include <opencv2/opencv.hpp>
#include <fstream>
#ifdef _DEBUG
#define new DEBUG_NEW
#endif
using namespace cv;
using namespace std;
VideoCapture cap;//  注册 摄像头
CRect rect1;
CRect rect2;
CRect rect3;
//全局变量，用来统计保存的图像，初始化为0
int ImgNum=0;
//多个矩形框相距 多少距离 合并在一起
#define DISTANCE_SIZE 30
//将输入图片的规格限在 ：480行，960列
#define HEIGHT 480
#define WIDTH 640
void TidyProposals(std::vector<cv::Rect> &proposals, int sizenum);
Mat srcImg,hsvImg,hsvThresholdImg,cutImg,openImg,closeImg,mediaBlurImg,finalRectImg,frame;
       Mat ScreenFinalRectImg;
// 用于应用程序“关于”菜单项的 CAboutDlg 对话框
class CAboutDlg : public CDialogEx
{
public:
       CAboutDlg();
// 对话框数据
       enum { IDD = IDD_ABOUTBOX };
       protected:
       virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持
// 实现
protected:
       DECLARE_MESSAGE_MAP()
};
CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}
void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
       CDialogEx::DoDataExchange(pDX);
}
BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()
// CMat版本摄像头MFC工程Dlg 对话框
CMat版本摄像头MFC工程Dlg::CMat版本摄像头MFC工程Dlg(CWnd* pParent /*=NULL*/)
       : CDialogEx(CMat版本摄像头MFC工程Dlg::IDD, pParent)
{
       m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}
void CMat版本摄像头MFC工程Dlg::DoDataExchange(CDataExchange* pDX)
{
       CDialogEx::DoDataExchange(pDX);
}
BEGIN_MESSAGE_MAP(CMat版本摄像头MFC工程Dlg, CDialogEx)
       ON_WM_SYSCOMMAND()
       ON_WM_PAINT()
       ON_WM_QUERYDRAGICON()
       ON_BN_CLICKED(IDC_OpenCamera, &CMat版本摄像头MFC工程Dlg::OnBnClickedOpencamera)
       ON_BN_CLICKED(IDC_ScereenShot, &CMat版本摄像头MFC工程Dlg::OnBnClickedScereenshot)
       ON_BN_CLICKED(IDC_CloseCamera, &CMat版本摄像头MFC工程Dlg::OnBnClickedClosecamera)
       ON_WM_TIMER()
          ON_BN_CLICKED(IDC_SaveImgae, &CMat版本摄像头MFC工程Dlg::OnBnClickedSaveimgae)
END_MESSAGE_MAP()
// CMat版本摄像头MFC工程Dlg 消息处理程序
BOOL CMat版本摄像头MFC工程Dlg::OnInitDialog()
{
       CDialogEx::OnInitDialog();
       // 将“关于...”菜单项添加到系统菜单中。
       // IDM_ABOUTBOX 必须在系统命令范围内。
       ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
       ASSERT(IDM_ABOUTBOX < 0xF000);
       CMenu* pSysMenu = GetSystemMenu(FALSE);
       if (pSysMenu != NULL)
       {
              BOOL bNameValid;
              CString strAboutMenu;
              bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
              ASSERT(bNameValid);
              if (!strAboutMenu.IsEmpty())
              {
                     pSysMenu->AppendMenu(MF_SEPARATOR);
                     pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
              }
       }
       // 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
       //  执行此操作
       SetIcon(m_hIcon, TRUE);                  // 设置大图标
       SetIcon(m_hIcon, FALSE);          // 设置小图标
       // TODO: 在此添加额外的初始化代码
       //初始化程序
      
       //第一个框 实时采集框
       CWnd *pWnd1=GetDlgItem(IDC_Frame1);
       pWnd1->GetClientRect(&rect1);   //根据界面中图像的窗口大小, 设定rect1大小
       namedWindow("vedioShow", WINDOW_AUTOSIZE);   //第一个窗口
       HWND hWnd1 = (HWND) cvGetWindowHandle("vedioShow");//函数cvGetWindowHandle返回原始的窗口句柄,在Win32情况下返回HWND
       HWND hParent1 = ::GetParent(hWnd1);//GetParent函数获得一个指定子窗口的父窗口句柄。
       ::SetParent(hWnd1, GetDlgItem(IDC_Frame1)->m_hWnd);
       ::ShowWindow(hParent1, SW_HIDE);
       //第二个框 截图框
       CWnd *pWnd2=GetDlgItem(IDC_Frame2);
       pWnd2->GetClientRect(&rect2);   //根据界面中图像的窗口大小, 设定rect1大小
       namedWindow("screenShot", WINDOW_AUTOSIZE);   //第一个窗口
       HWND hWnd2 = (HWND) cvGetWindowHandle("screenShot");
       HWND hParent2 = ::GetParent(hWnd2);
       ::SetParent(hWnd2, GetDlgItem(IDC_Frame2)->m_hWnd);
       ::ShowWindow(hParent2, SW_HIDE);
       //第三个框  画了矩形的框
       CWnd *pWnd3=GetDlgItem(IDC_Frame3);
       pWnd3->GetClientRect(&rect3);   //根据界面中图像的窗口大小, 设定rect1大小
       namedWindow("rectShow", WINDOW_AUTOSIZE);   //第一个窗口
       HWND hWnd3 = (HWND) cvGetWindowHandle("rectShow");//函数cvGetWindowHandle返回原始的窗口句柄,在Win32情况下返回HWND
       HWND hParent3 = ::GetParent(hWnd3);//GetParent函数获得一个指定子窗口的父窗口句柄。
       ::SetParent(hWnd3, GetDlgItem(IDC_Frame3)->m_hWnd);
       ::ShowWindow(hParent3, SW_HIDE);
       return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}
void CMat版本摄像头MFC工程Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
       if ((nID & 0xFFF0) == IDM_ABOUTBOX)
       {
              CAboutDlg dlgAbout;
              dlgAbout.DoModal();
       }
       else
       {
              CDialogEx::OnSysCommand(nID, lParam);
       }
}
// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。
void CMat版本摄像头MFC工程Dlg::OnPaint()
{
       if (IsIconic())
       {
              CPaintDC dc(this); // 用于绘制的设备上下文
              SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);
              // 使图标在工作区矩形中居中
              int cxIcon = GetSystemMetrics(SM_CXICON);
              int cyIcon = GetSystemMetrics(SM_CYICON);
              CRect rect;
              GetClientRect(&rect);
              int x = (rect.Width() - cxIcon + 1) / 2;
              int y = (rect.Height() - cyIcon + 1) / 2;
              // 绘制图标
              dc.DrawIcon(x, y, m_hIcon);
       }
       else
       {
              CDialogEx::OnPaint();
       }
}
//当用户拖动最小化窗口时系统调用此函数取得光标显示。
HCURSOR CMat版本摄像头MFC工程Dlg::OnQueryDragIcon()
{
       return static_cast<HCURSOR>(m_hIcon);
}
/*****************************************************
按钮打开摄像头
*******************************************************/
void CMat版本摄像头MFC工程Dlg::OnBnClickedOpencamera()
{
       // TODO: 在此添加控件通知处理程序代码
       //打开摄像头
       cap.open(0);
       if(!cap.isOpened()){
              MessageBox(_T("打开摄像头失败！"));
              return;
       }
       //设置定时器
       SetTimer(1,30,NULL);
}
/*****************************************************
按钮触发截图
*******************************************************/
void CMat版本摄像头MFC工程Dlg::OnBnClickedScereenshot()
{
       // TODO: 在此添加控件通知处理程序代码
                
              if(!cap.isOpened()){
              MessageBox(_T("摄像头已关闭，无法捕捉图像！"));
              return;
       }
               ScreenFinalRectImg=finalRectImg.clone();
               resize(finalRectImg,ScreenFinalRectImg,Size(rect2.Width(),rect2.Height()));
               imshow("screenShot",ScreenFinalRectImg);
}
/*****************************************************
按钮关闭摄像头
*******************************************************/
void CMat版本摄像头MFC工程Dlg::OnBnClickedClosecamera()
{
       // TODO: 在此添加控件通知处理程序代码
          //先将定时器1关闭
       KillTimer(1);
          //释放摄像头资源
          cap.release();
       if(!cap.isOpened()){
       MessageBox(_T("摄像头已成功关闭"));
       }
      
       //摄像头关闭时，原实时显示画面的框，设置显示一张图。
       Mat pic1= imread("F:\\PHOTO\\camera.jpg"); //图片读取路径可以自己设定
       Mat pic1Temp=pic1.clone();
       resize(pic1,pic1Temp,Size(rect1.Width(),rect1.Height()));
       imshow("vedioShow",pic1Temp);
       //摄像头关闭时，原显示带有矩形框的画面的框，设置显示一张图。
       Mat pic2= imread("F:\\PHOTO\\camera.jpg"); //图片读取路径可以自己设定
       Mat pic2Temp=pic2.clone();
       resize(pic2,pic2Temp,Size(rect3.Width(),rect3.Height()));
       imshow("rectShow",pic2Temp);
       //摄像头关闭时，原显示截图画面的框，设置显示一张图。
       Mat pic3= imread("F:\\PHOTO\\camera.jpg"); //图片读取路径可以自己设定
       Mat pic3Temp=pic3.clone();
       resize(pic3,pic3Temp,Size(rect2.Width(),rect2.Height()));
       imshow("screenShot",pic3Temp);
}
/*****************************************************
定时器需要循环处理的逻辑代码
*******************************************************/
void CMat版本摄像头MFC工程Dlg::OnTimer(UINT_PTR nIDEvent)
{
       // TODO: 在此添加消息处理程序代码和/或调用默认值
       //不同定时器对应的不同处理函数
        switch (nIDEvent) 
    {
        case 1:   //定时器1处理函数
        {
        
              //首先将原图像显示到第一个界面
              cap >> frame;
              Mat frameTemp=frame.clone();
              resize(frame,frameTemp,Size(rect1.Width(),rect1.Height()));
              imshow("vedioShow",frameTemp);
              //下面添加图像处理代码输入图像为frame
              //第一步：图像预处理操作
              Mat frame1Temp=frame.clone();
              resize(frame1Temp,srcImg,Size(WIDTH,HEIGHT));
              //finalRectImg是每一帧经过尺寸转换的复制图像
                       finalRectImg=srcImg.clone();
              cvtColor(srcImg,hsvImg,CV_BGR2HSV);
       // 设置垃圾袋 hsv 数值的范围
       int LowH=80;
       int HihgH=100;
       int LowS=60;
       int HighS=255;
       int LowV=100;
       int HighV=255;
       inRange(hsvImg,Scalar(LowH,LowS,LowV),Scalar(HihgH,HighS,HighV),hsvThresholdImg);
     
       Mat element = getStructuringElement(MORPH_RECT, Size(5, 5),Point(-1,-1));
       morphologyEx(hsvThresholdImg,openImg, MORPH_OPEN, element);    //开操作 (去除一些噪点)
       morphologyEx(openImg, closeImg, MORPH_CLOSE, element);        //闭操作 (连接一些连通域)
       medianBlur(closeImg, mediaBlurImg, 11);                      //中值滤波 消除椒盐噪声 保护边缘信息
          //第二步： 画所有矩形框
         //！！！全局变量 要慎用。
     //比如绘制矩形框，如果将矩形框contours 或者是处理后形成的 tempBoundRect ,定义为全局变量，那么他们矩形框会一直叠加，
     //即使更新了图片，更新了视频帧，矩形框还是会存在，并且会不断的叠加。
          Scalar color = Scalar(0, 0, 255);
          vector<vector<Point>> contours;
       vector<Vec4i> hierarchy;
          //定义一个过滤后的矩形容器向量,值为空,用以存放要求的矩形框
          vector<Rect> tempBoundRect;
       findContours(mediaBlurImg, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);
       vector<vector<Point>> contours_poly(contours.size());
       vector<Rect>boundRect(contours.size());
       Mat figureImg,rectImg;
       for (int i = 0; i < contours.size(); i++) {
             //使用多边形逼近检测到的图像轮廓来寻找包围轮廓的矩形,contours_poly ：拟合点的集合
             approxPolyDP(contours[i], contours_poly[i], 3, true);
             boundRect[i]=boundingRect(Mat(contours_poly[i]));
             //把符合要求的框，存入集合tempBoundRect
             tempBoundRect.push_back(boundRect[i]);   
         }
      //第三步：将上面获取得到的矩形框集合，从中将所有矩形框取出并进行合并处理
      TidyProposals(tempBoundRect, DISTANCE_SIZE);
         //然后将合并后的矩形框绘制到图像上
         for(int m=0;m<tempBoundRect.size();m++){
              //finalRectImg是每一帧经过尺寸转换的图像，即在每一帧上绘制矩形
                 rectangle(finalRectImg,tempBoundRect[m],Scalar(0, 0, 255),2,8,0);
                 } 
              //将绘制完成的图像传入显示框，进行显示
               Mat finalRectImgTemp=finalRectImg.clone();
               resize(finalRectImg,finalRectImgTemp,Size(rect3.Width(),rect3.Height()));
               imshow("rectShow",finalRectImgTemp);
        break;
        }
    }
        //类似于使用 switch里的哪个定时器选项:
       CDialogEx::OnTimer(nIDEvent);
}
void CMat版本摄像头MFC工程Dlg::OnBnClickedSaveimgae()
{
       // TODO: 在此添加控件通知处理程序代码
       if(!cap.isOpened()){
              MessageBox(_T("摄像头已关闭，无法捕获、保存图像！"));
       }
       else if(ScreenFinalRectImg.empty()){
              MessageBox(_T("未选择要保存的图像"));
       }
       else{
        //将截屏的图片保存到本地
     //若目录不存在，则创建目录
       CString ImagePath =TEXT("F:\\PHOTO\\screenShot");
       if(!PathIsDirectory(ImagePath)){
              CreateDirectory(ImagePath,0);                  
              return;
       }
       
       //给图像命名saveImage+数字序号+jpg
       //F:\\PHOTO\\screenShot\\  是保存的路径
       char ImagesName[100];
       sprintf_s(ImagesName, "%s%.2d%s", "F:\\PHOTO\\screenShot\\saveImage", ImgNum, ".jpg");
       //将图像写入本地
       imwrite(ImagesName,ScreenFinalRectImg);
       MessageBox(_T("保存成功"));
       ImgNum+=1;
       }
}


==============================================================================================================================
===============================================================================================================================
#include "stdafx.h"
#include "MFC打开摄像头显示图像.h"
#include "MFC打开摄像头显示图像Dlg.h"
#include "afxdialogex.h"
#include "CvvImage.h"
#include "cv.h"
#include "highgui.h"
#include <iostream>
#include <opencv2/opencv.hpp>
#include <Windows.h>
#include <iomanip>
#include <fstream>
using namespace cv;
using namespace std;
void TidyProposals(std::vector<cv::Rect> &proposals);
int CalDistance(cv::Rect r1, cv::Rect r2);
bool isIntersectingR(const cv::Rect a, const cv::Rect b);
Rect MergeRect(cv::Rect a, cv::Rect b);
bool isRectInRect(cv::Rect r1, cv::Rect r2);
static int is_rect_intersect(const int x[], const int y[]);
void DeleteFromProposals(std::vector<cv::Rect> &proposals, cv::Rect r);
bool isPointInRectCv(int x, int y, cv::Rect rect);
void TidyProposals(std::vector<cv::Rect> &proposals, int sizenum)
{
       int size, lastsize = 0;
       size = proposals.size(); //向量(矩形框)个数
                                                 //直到两次处理proposals中的元素个数不变
       while (size != lastsize)
       {
              auto temp = proposals;  //建立一个副本（temp也是一个集合）
              //auto 自动根据后面的内容 推断前面的类型
              for (auto &rect : temp)
              {
                     //把temp赋值给rect
                     //proposals中的元素是一个个的rect矩形框
                     for (auto iter = proposals.begin(); iter != proposals.end();)
                     {
                           //新建的副本是 proposals 集合的第一个矩形框的话，迭代器加1
                           if (*iter == rect)
                                  ++iter;
                           //如果temp取出并赋值给变量rect 的 不是第一个矩形框，他们框之间的距离小于sizenum
                           else if (CalDistance(*iter, rect) <= sizenum)
                           {
                                  //则求两个矩形的外接矩形
                                  *iter = MergeRect(*iter, rect);
                                
                                  if (!isRectInRect(*iter, rect))
                                         DeleteFromProposals(proposals, rect);//并删除proposals中与rect相等的元素
                                  break;
                           }
                           else
                                  ++iter;
                     }
              }
              lastsize = size;
              size = proposals.size();
       }
    
       return;
}
/******************************************
brief:
计算两个矩形之间的距离
若两个矩形相交，则返回0
先计算x方向最小距离dx
再计算y方向最小距离dy
d = sqrt（dx*dx + dy*dy）
******************************************/
int CalDistance(cv::Rect r1, cv::Rect r2)
{
       //如果两个矩形框相交，返回0
       if (isIntersectingR(r1, r2))
              return 0;
       //先计算外接矩形
       Rect r3 = MergeRect(r1, r2);
       int dx = 0, dy = 0;
       //纵向不重叠,计算纵向最小距离
       if (r3.height >= r1.height + r2.height)
       {
              dy = min(min(abs(r1.y - r2.y), abs(r1.y - r2.y - r2.height)),min(abs(r1.y + r1.height - r2.y), abs(r1.y + r1.height - r2.y - r2.height)));
       }
       //横向不重叠，计算横向最小距离
       if (r3.width >= r1.width + r2.width)
       {
              dx = min(min(abs(r1.x - r2.x), abs(r1.x - r2.x - r2.width)),min(abs(r1.x + r1.width - r2.x), abs(r1.x + r1.width - r2.x - r2.width)));
       }
       //计算综合最小距离
       int d = sqrt(dy*dy + dx * dx);
       return d;
}
//两个矩形是否有交集
bool isIntersectingR(const cv::Rect a, const cv::Rect b)
{
       //判断一个矩形（四个顶点）中是否有在另一个矩形b内
       //这是矩形a 的四个顶点
       int x[4], y[4];
       x[0] = a.x; y[0] = a.y;
       x[1] = a.x; y[1] = a.y + a.height;
       x[2] = a.x + a.width; y[2] = a.y;
       x[3] = a.x + a.width; y[3] = a.y + a.height;
       for (int i = 0; i<4; i++)
       {
              //循环判断点a是否在矩形框b内
              if (true == isPointInRectCv(x[i], y[i], b))
                     return true;
       }
       //判断一个矩形b（四个顶点）中是否有在另一个矩形a内
       //这是矩形b 的四个顶点
       int x1[4], y1[4];
       x1[0] = b.x; y1[0] = b.y;
       x1[1] = b.x; y1[1] = b.y + b.height;
       x1[2] = b.x + b.width; y1[2] = b.y;
       x1[3] = b.x + b.width; y1[3] = b.y + b.height;
       for (int i = 0; i<4; i++)
       {
              //循环判断点b是否在矩形框a内
              if (true == isPointInRectCv(x1[i], y1[i], a))
                     return true;
       }
       return false;
}
//求两个矩形的外接矩形
cv::Rect MergeRect(cv::Rect a, cv::Rect b)
{
       cv::Rect c;
       c.x = min(a.x, b.x);
       c.y = min(a.y, b.y);
       int t = max(a.x + a.width, b.x + b.width);
       c.width = t - c.x;
       t = max(a.y + a.height, b.y + b.height);
       c.height = t - c.y;
       //c.area() = a.area() + b.area();  //面积
       //printf("========> c.area() = %d\n", c.area());
       return c;
}
//区域是否在另一个区域内部
//判断矩形框是否在另一个矩形框内部
bool isRectInRect(cv::Rect r1, cv::Rect r2)
{
       //判断矩形框的四个顶点是否同时在另一个矩形框的内部
       if (isPointInRectCv(r1.x, r1.y, r2)
              && isPointInRectCv(r1.x + r1.width, r1.y + r1.height, r2)
              && isPointInRectCv(r1.x, r1.y + r1.height, r2)
              && isPointInRectCv(r1.x + r1.width, r1.y, r2))
       {
              return true;
       }
       else
              return false;
}
//判断两个矩形框是否相交
static int is_rect_intersect(const int x[], const int y[])
{
       int zx = abs(x[0] + x[1] - x[2] - x[3]);
       int x_x = abs(x[0] - x[1]) + abs(x[2] - x[3]);
       int zy = abs(y[0] + y[1] - y[2] - y[3]);
       int y_y = abs(y[0] - y[1]) + abs(y[2] - y[3]);
       if (zx <= x_x && zy <= y_y)
              return 1;   //相交
       else
              return 0;   //不相交
}
//删除指定大小的rect
void DeleteFromProposals(std::vector<cv::Rect> &proposals, cv::Rect r)
{
       for (auto iter = proposals.begin(); iter != proposals.end();)
       {
              if (*iter == r)
                     iter = proposals.erase(iter);
              else
                     ++iter;
       }
       return;
}
//点是否在区域内部
bool isPointInRectCv(int x, int y, cv::Rect rect)
{
       if (x >= rect.x && x <= (rect.x + rect.width)
              && y >= rect.y && y <= (rect.y + rect.height))
              return true;
       else
              return false;
}









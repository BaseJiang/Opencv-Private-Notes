//是一个很好的边缘检测器。
//图像梯度幅值矩阵中的元素值越大，说明图像中该点的梯度值越大，但这不能说明该点就是边缘（这仅仅是属于图像增强的过程）。
//在Canny算法中，非极大值抑制是进行边缘检测的重要步骤，通俗意义上是指寻找像素点局部最大值，将非极大值点所对应的灰度值置为0，
//这样可以剔除掉一大部分非边缘的点（这是本人的理解）。
//要进行非极大值抑制，就灰度值在其8值首先要确定像素点C的邻域内是否为最大。图中蓝色的线条方向为C点的梯度方向，这样就可以确定
//其局部的最大值肯定分布在这条线上，也即除了C点外，梯度方向的交点dTmp1和dTmp2这两个点的值也可能会是局部最大值。
//因此，判断C点灰度与这两个点灰度大小即可判断C点是否为其邻域内的局部最大灰度点。如果经过判断，C点灰度值小于这两个点中的任一个，
//那就说明C点不是局部极大值，那么则可以排除C点为边缘。这就是非极大值抑制的工作原理。
////注意以下两点：
//1）非最大抑制是回答这样一个问题：“当前的梯度值在梯度方向上是一个局部最大值吗？” 所以, 要把当前位置的梯度值与梯度方向上两侧的梯度值进行比较；
//2）梯度方向垂直于边缘方向。
//但实际上，我们只能得到C点邻域的8个点的值，而dTmp1和dTmp2并不在其中，要得到这两个值就需要对该两个点两端的已知灰度进行线性插值，
//也即根据图中的g1和g2对dTmp1进行插值，根据g3和g4对dTmp2进行插值，这要用到其梯度方向，这是Canny算法中要求解梯度方向矩阵Thita的原因。
//完成非极大值抑制后，会得到一个二值图像，非边缘的点灰度值均为0，可能为边缘的局部灰度极大值点可设置其灰度为128。
//这样一个检测结果还是包含了很多由噪声及其他原因造成的假边缘。因此还需要进一步的处理。
//T1， T2为阈值，凡是高于T2的都保留，凡是小于T1都丢弃。从高于T2的像素出发，凡是大于T1而且相互连接的，都保留。最终得到一个输出二值图像。
//推荐的高低阈值比值为 T2 : T1 = 3 : 1 / 2 : 1其中T2为高阈值，T1为低阈值
////canny算法步骤
//1.高斯模糊--GaussianBlur消除噪声。 一般情况下使用高斯平滑滤波器卷积降噪。因为canny是对噪声敏感的算法，所以先降噪，但是降噪不要太过，以免丢失
//2.灰度转换--cvtColor　　
//3.计算梯度--Sobel / Scharr
//4.非最大信号抑制
//5.高低阈值输出二值图像
//Canny（
//InputArray src, 
// 8-bit的输入图像，可以是单通道，也可以是多通道
//OutputArray edges,
// 输出边缘图像，单通道 8-bit， 一般都是二值图像，背景是黑色
//double threshold1,
// 低阈值，常取高阈值的1/2或者1/3
//double threshold2,
// 高阈值
//int aptertureSize,
// Soble算子的size，通常3x3，取值3!
//bool L2gradient 
// 选择 true表示是L2来归一化（根号下x梯度平方+y梯度平方），否则用L1（x梯度绝对值+y梯度绝对值）归一化
//）
#include<opencv2/opencv.hpp>
#include<iostream>
#include<math.h>
void canny_demo(int, void*);
using namespace cv;
int main(int argc, char** argv) {  
	Mat src, gray, dst1, dst2;
	int t1 = 50;//低阈值   
	int t2 = t1 * 2;//高阈值   
	int max_value = 255;   
	src = imread("F:/PHOTO/cat.jpg");   
	if (!src.data) {     
		printf("can not load image../n");      
		return -1;  
	}     
	imshow("input",src);   
	//Gaussian 模糊    
	GaussianBlur(src,dst1,Size(3,3),0,0,BORDER_DEFAULT);     
	//转灰度图像   
	cvtColor(dst1,gray,CV_BGR2GRAY);    
	//canny算法 输入、输出、低阈值、高阈值、算子size、true：归一化（根号下x梯度平方+y梯度平方）   
	Canny(gray, dst2, t1, t2, 3, true);    
	imshow("canny_demo", dst2);    
	waitKey(0);    
	return 0;
}

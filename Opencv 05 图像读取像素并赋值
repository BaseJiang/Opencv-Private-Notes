//读一个GRAY像素点的像素值（CV_8UC1）
//Scalar intensity = img.at<uchar>(y, x);
//或者 Scalar intensity = img.at<uchar>(Point(x, y));
//读一个RGB像素点的像素值  Vec3f对应三通道的float类型数据
//Vec3f intensity = img.at<Vec3f>(y, x);
//float blue = intensity.val[0];  
//float green = intensity.val[1];
//float red = intensity.val[2];
//灰度图像//img.at<uchar>(y, x) = 128;
////RGB三通道图像//img.at<Vec3b>(y, x)[0] = 128;
// blue
//img.at<Vec3b>(y, x)[1] = 128; 
// green
//img.at<Vec3b>(y, x)[2] = 128; 
// red
////空白图像赋值
//img = Scalar(0);
//把CV_8UC1转换到CV32F1实现如下：
//src.convertTo(dst, CV_32F);
#include<opencv2/opencv.hpp>
#include<iostream>
using namespace std;
using namespace cv;
int main(int argc, char** argv) { 
	Mat src, gray_src;   
	src = imread("F:/test.png");      
	if (src.empty()) {          
		cout << "could not load image..." << endl;      
		return -1;  
	}     
	namedWindow("input", CV_WINDOW_AUTOSIZE);  
	imshow("input", src);   
	//灰色图      
	cvtColor(src, gray_src, CV_BGR2GRAY);     
	namedWindow("output", CV_WINDOW_AUTOSIZE);    
	imshow("output", gray_src);       
	int height = gray_src.rows;    
	int width = gray_src.cols;       
	//灰色图为单通道     
	for (int row = 0; row < height; row++) {    
		for (int col = 0; col < width; col++) {       
			int gray = gray_src.at<uchar>(row, col);
			//读取灰度图像所有像素数据        
			//对每个像素进行赋值操作   反差操作          
			gray_src.at<uchar>(row, col) = 255 - gray;         
		}    
	}     
	namedWindow("gray invert", CV_WINDOW_AUTOSIZE);   
	imshow("gray invert", gray_src); 
	//三通道彩色照片 反差操作  
	Mat dst;      
	dst.create(src.size(), src.type());  
	height = src.rows;   
	width = src.cols;    
	for (int row = 0; row < height; row++) {      
		for (int col = 0; col < width; col++) {         
			int b = src.at<Vec3b>(row, col)[0];            
			int g = src.at<Vec3b>(row, col)[1];       
			int r = src.at<Vec3b>(row, col)[2];            
			dst.at<Vec3b>(row, col)[0] = 255 - b;        
			dst.at<Vec3b>(row, col)[1] = 255 - g;            
			dst.at<Vec3b>(row, col)[2] = 255 - r;       
		}     
	}   
	namedWindow("caise invert", CV_WINDOW_AUTOSIZE);     
	imshow("caise invert", dst);   
	//三通道彩色照片  利用api函数 bitwise（）完成反差操作   
	Mat dsm;      
	bitwise_not(src, dsm);     
	namedWindow("bitwise_not invert", CV_WINDOW_AUTOSIZE);    
	imshow("bitwise_not invert", dsm);    
	waitKey(0);   
	return 0;
}

//模糊原理Smooth/Blur 是图像处理中最简单和常用的操作之一，目的是给图像预处理时候减低噪声
//使用Smooth / Blur操作其背后是数学的卷积计算，通常这些卷积算子计算都是线性操作，所以又叫线性滤波
//1均值模糊滤波 
//支持本地计算，即输入，输出可以是同一个图像对象均值滤波是一种典型的线性滤波算法，主要是利用像素点邻域的像素值来计算像素点的值。其具体方法是首先给出一个滤波模板kernel，
//该模板将覆盖像素点周围的其他邻域像素点，去掉像素本身，将其邻域像素点相加然后取平均值即为该像素点的新的像素值，这就是均值滤波的本质。
//- blur(Mat src, Mat dst, Size(xradius, yradius), Point(-1, -1));
//第一个参数，InputArray类型的src，输入图像，即源图像，该函数对通道是独立处理的，
//待处理的图片深度应该为CV_8U, CV_16U, CV_16S, CV_32F 以及 CV_64F之一。
//第二个参数，OutputArray类型的dst，即目标图像，需要和源图片有一样的尺寸和类型。
//第三个参数，Size类型 ksize内核的大小。一般这样写Size(w, h)来表示内核的大小(其中，w 为像素宽度（x）， h为像素高度（y）)。
//Size（3, 3）就表示3x3的核大小，Size（5, 5）就表示5x5的核大小
//第四个参数，Point类型的anchor，表示锚点（即被平滑的那个点），默认值Point(-1, -1)取核的中心为锚点。
//第五个参数，int类型的borderType，用于推断图像外部像素的某种边界模式。有默认值BORDER_DEFAULT，我们一般不去管它。
//缺点：均值滤波本身存在着固有的缺陷，即它不能很好地保护图像细节，在图像去噪的同时也破坏了图像的细节部分，
//从而使图像变得模糊，不能很好地去除噪声点。
//2 高斯模糊
//高斯滤波是一种线性平滑滤波，通俗的讲就是高斯滤波是对整幅图像进行加权平均的过程，每一个像素点的值都由其本身和邻域内的其他像素值经过加权平均后得到。用一个模板（或称卷积、掩模）扫描图像中的每一个像素，用模板确定的邻域内像素的加权平均灰度值去替代模板中心像素点的值。
//在图像处理中高斯滤波一般有两种实现方式：一种是用离散化窗口滑窗卷积，另一种是通过傅里叶变换。最常见的就是第一种滑窗实现，只有当离散化的窗口非常大，用滑窗计算量非常大的情况下会考虑基于傅里叶变换的方法。
//高斯模糊、高斯滤波
//高斯滤波和高斯模糊就是依据滤波器是低通滤波器还是高通滤波器来区分的。
//比如低通滤波器，像素能量低的通过，而对于像素能量高的部分将会采取加权平均的方法重新计算像素的值，将能量像素的值变成能量较低的值，对于图像而言其高频部分展现图像细节，所以经过低通滤波器之后整幅图像变成低频造成图像模糊。
//高斯滤波：
//高通滤波是允许高频通过而过滤掉低频，这样将低频像素进行锐化操作，图像变的更加清晰，高斯滤波在图像处理中常用来对图像进行预处理操作，虽然耗时但是数字图像用于后期应用但是其噪声是最大的问题，对图像进行预处理去除噪声也是针对数字图像处理的无奈之举。
//高斯滤波器是一类根据高斯函数的形状来选择权值的线性平滑滤波器，高斯滤波器对于服从正太分布的噪声非常有效，
//- GaussianBlur(Mat src, Mat dst, Size(11, 11), sigmax, sigmay);
//第一个参数，InputArray类型的src，输入图像，图片深度应该为CV_8U, CV_16U, CV_16S, CV_32F 以及 CV_64F之一。
//第二个参数，OutputArray类型的dst，即目标图像，需要和源图片有一样的尺寸和类型。
//第三个参数，Size类型的ksize高斯内核的大小。其中ksize.width和ksize.height可以不同，但他们都必须为正数和奇数。
//或者，它们可以是零的，它们都是由sigma计算而来。
//第四个参数，double类型的sigmaX，表示高斯核函数在X方向的的标准偏差。
//第五个参数，double类型的sigmaY，表示高斯核函数在Y方向的的标准偏差。
//若sigmaY为零，就将它设为sigmaX，如果sigmaX和sigmaY都是0，那么就由ksize.width和ksize.height计算出来。
//为了结果的正确性着想，最好是把第三个参数Size，第四个参数sigmaX和第五个参数sigmaY全部指定到。
//第六个参数，int类型的borderType，用于推断图像外部像素的某种边界模式。有默认值BORDER_DEFAULT，我们一般不去管它。
//3 中值滤波
//中值滤波是一种典型的非线性滤波，基本思想是用像素点邻域灰度值的中值来代替该像素点的灰度值，让周围的像素值接近真实的值从而消除孤立的噪声点。该方法在取出脉冲噪声、椒盐噪声的同时能保留图像的边缘细节。这些优良特性是线性滤波所不具备的。中值滤波首先也得生成一个滤波模板，将该模板内的各像素值进行排序，生成单调上升或单调下降的二维数据序列，二维中值滤波输出为g(x, y) = medf{ f(x - k, y - 1),(k, l∈w) }，
//其中f(x, y)和g(x, y)分别是原图像和处理后图像, w为输入的二维模板，能够在整幅图像上滑动，通常尺寸为3 * 3或5 * 5区域，也可以是不同的形状如线状、圆形、十字形、圆环形等。通过从图像中的二维模板取出奇数个数据进行排序，用排序后的中值取代要处理的数据即可。中值滤波对消除椒盐噪声非常有效，能够克服线性滤波器带来的图像细节模糊等弊端，能够有效保护图像边缘信息，是非常经典的平滑噪声处理方法，但在条纹中心分析方法中作用不大。
//取得良好滤波效果的代价就是耗时的提升，可能达到均值滤波的数倍，而且对于细节较多的图像也不太适用。
//void medianBlur(InputArray src, OutputArray dst, int ksize)
//第一个参数InputArray src : 输入图像，图像为1、3、4通道的图像，当模板尺寸为3或5时，图像深度只能为CV_8U、CV_16U、CV_32F
//如而对于较大孔径尺寸的图片，图像深度只能是CV_8U。
//第二个参数OutputArray dst : 输出图像，尺寸和类型与输入图像一致。
//第三个参数int ksize : 滤波模板的尺寸大小，必须是大于1的奇数，如3、5、7…

//4 双边滤波
//双边滤波是一种非线性的滤波方法，是结合图像的空间邻近度和像素值相似度的一种折衷处理，同时考虑空间与信息和灰度相似性，达到保边去噪的目的，具有简单、非迭代、局部处理的特点。双边滤波模板主要有两个模板生成，第一个是高斯模板，第二个是以灰度级的差值作为函数系数生成的模板，然后这两个模板点乘就得到了最终的双边滤波模板，第一个模板是全局模板，所以只需要生成一次，第二个模板需要对每个像素都计算一次。双边滤波器比高斯滤波器多了一个高斯方差sigma - d, 它是基于空间分布的高斯滤波函数，离的较远的像素不会太多影响到边缘上的像素，这样就能对边缘附近的像素值予以保存，但是由于保存过多的高频信息，对于彩色图像里的高频噪声，双边滤波器不能够干净的滤掉，只能够对于低频信息进行较好的滤除。

//双边滤波器可以很好的保存图像边缘细节而滤除掉低频分量的噪音，但是双边滤波器的效率不是太高，花费的时间相较于其他滤波器而言也比较长。对于简单的滤波而言，可以将两个sigma值设置成相同的值，如果值 < 10，则对滤波器影响很小，如果值>150则会对滤波器产生较大的影响，会使图片看起来像卡通。
//void bilateralFilter(InputArray src, OutputArray dst, int d, double sigmaColor, double sigmaSpace, int borderType = BORDER_DEFAULT)
//参数1：InputArray src : 输入图像，可以是Mat类型，图像必须是8位或浮点型单通道、三通道的图像。
//参数2：OutputArray dst : 输出图像，和原图像有相同的尺寸和类型。
//参数3：int d : 表示在过滤过程中每个像素邻域的直径范围。如果这个值是非正数，则函数会从第五个参数sigmaSpace计算该值。
//参数4：double sigmaColor : 颜色空间过滤器的sigma值，这个参数的值越大，表明该像素邻域内有越宽广的颜色会被混合到一起，产生较大的半相等颜色区域。
//参数5：double sigmaSpace : 坐标空间中滤波器的sigma值，如果该值较大，则意味着颜色相近的较远的像素将相互影响，从而使更大的区域中足够相似的颜色获取相同的颜色。
//当d > 0时，d指定了邻域大小且与sigmaSpace无关，否则d正比于sigmaSpace.
//参数6：int borderType = BORDER_DEFAULT: 用于推断图像外部像素的某种边界模式，有默认值BORDER_DEFAULT.
#include<opencv2/opencv.hpp>
#include<iostream>
using namespace cv;
int main(int argc, char** argv) {
	Mat src, dst, dst1,dst3,dst4;
	src = imread("F:/PHOTO/dog.jpg");
	if (src.empty()) {
		printf("could not load image...\n");
		return -1;
	}
	namedWindow("inputimage", CV_WINDOW_AUTOSIZE);
	imshow("inputimage", src);
	//均值模糊
	blur(src, dst, Size(11, 11), Point(-1, -1));
	namedWindow("blurimage", CV_WINDOW_AUTOSIZE);
	imshow("blurimage", dst);

	//高斯模糊
	GaussianBlur(src, dst1, Size(11, 11), 11, 11);
	namedWindow("GaussianBlurimage", CV_WINDOW_AUTOSIZE);
	imshow("GaussianBlurimage", dst1);

	//中值滤波
	medianBlur(src, dst3, 3);
	namedWindow("medianBlurimage", CV_WINDOW_AUTOSIZE);
	imshow("medianBlurimage", dst3);

	//双边滤波
	bilateralFilter(src, dst4, 15, 100, 5);
	namedWindow("bilateralFilterimage", CV_WINDOW_AUTOSIZE);
	imshow("bilateralFilterimage", dst4);
	waitKey(0);
	return 0;
}

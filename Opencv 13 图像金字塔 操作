//图像金字塔操作
//opencv自带图片色素的处理函数：
//与：bitwise_add()
//或：bitwise_or()
//非：bitwise_not()
//异或：bitwise_xor()
//一个图像金字塔是一系列图像的集合，所有图像来源于同一张原始图像，通过梯次向下采样获得，直到达到某个终止条件才停止采样。
//图像金字塔式最底下一张是图像尺寸最大，最上方的图像尺寸最小，
//通常有两种类型的图像金字塔
//高斯金字塔(Gaussian pyramid) : 用来降采样，用来对图像进行降采样, 高斯金子塔是从底向上，逐层降采样得到。
//降采样之后图像大小是原图像MxN的M / 2 x N / 2, 得到降采样之后上一层的图片。
//高斯金子塔的生成过程分为两步：对当前层进行高斯模糊、删除当前层的偶数行与列即可得到上一层的图像，这样上一层跟下一层相比，都只有它的1 / 4大小。
//高斯不同(Difference of Gaussian - DOG)
//定义：就是把同一张图像在不同的参数下做高斯模糊之后的结果相减，得到的输出图像。称为高斯不同(DOG)
//高斯不同是图像的内在特征，在灰度图像增强、角点检测中经常用到。
//上采样(cv::pyrUp) – zoom in 放大
//降采样(cv::pyrDown) – zoom out 缩小
//pyrUp(Mat src, Mat dst, Size(src.cols * 2, src.rows * 2))
//生成的图像是原图在宽与高各放大两倍
//pyrDown(Mat src, Mat dst, Size(src.cols / 2, src.rows / 2))
//生成的图像是原图在宽与高各缩小1 / 2

//(1)对图像进行高斯内核卷积
//void cv::pyrDown(InputArray src,OutputArray dst,const Size & dstsize = Size(),int borderType = BORDER_DEFAULT)
//参数1：InputArray src : 输入图像
//参数2：OutputArray dst : 输出图像，尺寸由第三个参数指定，类型与输入图像一致
//参数3： const Size & dstsize = Size() : 输出图像的尺寸，有默认值Size()，在默认情况下将会由Size((src.cols + 1) / 2, (src.rows + 1) / 2)计算得到，
//并且还要满足以下条件
//| dstsize.width * 2 - src.cols|<=2
//| dstsize.height * 2 - src.rows|<=2
//参数4： int borderType = BORDER_DEFAULT: 用于推断图像外部像素的某种边界模式，有默认值BORDER_DEFAULT

//拉普拉斯金字塔(Laplacian pyramid) : 上采样可以对图像进行最大程度的还原.
//拉普拉斯金字塔是上采样，重建上层未采样图像，在图像处理中预测残差。得到的图像比原来图像的尺寸大。向上采样如下：
//(1)将图像在每个方向上扩大为原来的两倍，新增的行和列以0填充
//(2)使用先前同样的内核(乘以4)与放大后的图像卷积，或得”新增像素”的近似值
//得到的图像即为放大后的图像，但所与原来的图像相比会比较模糊，因为、丢失了一些信息。、

//void cv::pyrUp(InputArray src,OutputArray dst,const Size & dstsize = Size(),int  borderType = BORDER_DEFAULT)
//参数1：InputArray src : 输入图像
//参数2：OutputArray dst : 输出图像
//参数3：const Size & dstsize = Size() : 输出图像尺寸，有默认值Size()，在使用默认值的情况下，输出图像的尺寸由Size((src.cols * 2), (src.rows * 2))计算得到，
//但是必须满足以下条件
//dstsize.width - src.cols * 2|<=(dstsize.width mod 2)
//dstsize.height - src.rows * 2|<=(dstsize.height mod 2)
//其中mod时求余函数，即dstsize.width mod 2是dstsize.width除以2的余数。
//参数4：int borderType = BORDER_DEFAULT: 用于推断图像外部像素的某种边界模式，有默认值BORDER_DEFAULT，
//具体可以查看函数BorderTypes获取详细信息

#include <opencv2/opencv.hpp>
#include <iostream>
#include "math.h"
using namespace cv;
int main(int agrc, char** argv) {
	Mat src, dst1,dst2;
	src = imread("F:/PHOTO/cat.jpg");
	if (!src.data) {
		printf("could not load image...");
		return -1;
	}
	namedWindow("input", CV_WINDOW_AUTOSIZE);
	imshow("input", src);

	// 上采样,放大
	pyrUp(src, dst1, Size(src.cols * 2, src.rows * 2));
	namedWindow("pyrupImg", CV_WINDOW_AUTOSIZE);
	imshow("pyrupImg", dst1);

	// 降采样
	pyrDown(src, dst2, Size(src.cols / 2, src.rows / 2));
	namedWindow("pyrdownImg", CV_WINDOW_AUTOSIZE);
	imshow("pyrdownImg", dst2);

	//高斯不同，这个仅是针对原图像操作 高斯不同，为了简单，并不是标准的高斯不同操作
	//定义：就是把同一张图像在不同的参数下做高斯模糊之后的结果相减，得到的输出图像。称为高斯不同(DOG)
	Mat gray, g1, g2, dogImg;
	//对原图像src进行获取灰度图操作
	cvtColor(src, gray, CV_BGR2GRAY);

	//对灰度图进行高斯模糊操作，获得g1图像
	GaussianBlur(gray, g1, Size(5, 5), 0, 0);

	//继续对g1图像进行高斯模糊，获得g2图像
	GaussianBlur(g1, g2, Size(5, 5), 0, 0);
	//两个图像相减
	//参数1、2为输入图像，参数3为输出图像，参数4为掩模，这里为空
	subtract(g1, g2, dogImg, Mat());

	// 归一化显示该函数归一化输入数组使它的范数或者数值范围在一定的范围内。
	/*void normalize(InputArray src, OutputArray dst, double alpha = 1, double beta = 0, int norm_type = NORM_L2, int dtype = -1, InputArray mask = noArray())
	参数1：输入图像src  
	参数2：输出图像dst，支持本地计算
	参数3：alpha range normalization模式的最小值
	参数4：beta range normalization模式的最大值，
	参数5：normType 归一化的类型，可以有以下的取值：
	NORM_MINMAX : 数组的数值被平移或缩放到一个指定的范围，线性归一化，一般较常用。
	NORM_INF : 此类型的定义没有查到，根据OpenCV 1的对应项，可能是归一化数组的C - 范数(绝对值的最大值)
	NORM_L1 : 归一化数组的L1 - 范数(绝对值的和)
	NORM_L2 : 归一化数组的(欧几里德)L2 - 范数
	参数6：dtype为负数时，输出数组的type与输入数组的type相同；否则，输出数组与输入数组只是通道数相同，而tpye = CV_MAT_DEPTH(dtype).
	参数7：mask操作掩膜，用于指示函数是否仅仅对指定的元素进行操作。*/

	normalize(dogImg, dogImg, 255, 0, NORM_MINMAX);
	namedWindow("DOGImage", CV_WINDOW_AUTOSIZE);
	imshow("DOGImage", dogImg);
	waitKey(0);
	return 0;
}

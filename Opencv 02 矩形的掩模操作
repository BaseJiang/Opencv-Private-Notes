#include <opencv2/opencv.hpp>
#include <iostream>
#include<math.h>
using namespace cv;
int main (int argc,char** argv){
	Mat src, dst;
	src = imread("F:/test.png");
	if (!src.data) {
		printf("could not load image....\n"); 
		return -1;  
	}
	imshow("input image", src);
	double t = getTickCount();   
	//显示计算时间
	//自己编写程序完成掩模操作
	int cols = (src.cols - 1) * src.channels();
	int offsetx = src.channels();
	int rows = src.rows;
	// 行列的序号是从0开始的，所以rows的值是大于序号一个数字的 。dst = Mat::zeros(src.size(), src.type());  
	//新建一个规定大小、类型的mat对象。
	for (int row = 1; row < (rows - 1); row++) {  
		const uchar* previous = src.ptr<uchar>(row - 1);
		//mat.ptr<uchar>(int i =0 ) 获取像素矩阵的指针，索引i表示第几行，从0开始计数。 
		const uchar* current = src.ptr<uchar>(row);
		//  const uchar* current = myImage.ptr<uchar>(row);  获得当前行指针   
		const uchar* next = src.ptr<uchar>(row + 1);  
		uchar* output = dst.ptr<uchar>(row); 
		for (int col = offsetx; col < cols; col++) {   
			output[col] = saturate_cast<uchar>(5 * current[col] - (current[col - offsetx] + current[col + offsetx] + previous[col] + next[col]));   
		}
	}
	//saturate_cast<uchar> 像素处理范围
	//利用filter2d函数完成掩模操作
	//Mat kernel = (Mat_<char>(3, 3) << 0, -1, 0, -1, 5, -1, 0, -1, 0);filter2D(src, dst, src.depth(), kernel);double timeconsume = (getTickCount() - t) / getTickFrequency();*
	///printf("timeconsume%.2f\n", timeconsume);     
	imshow("contrast image demo", dst);  
	waitKey(0);    
	return 0;
}

//课程18 Laplacian算子 提取边缘
//在二阶导数的时候，最大变化处的值为零即边缘是零值。通过二阶导数计算，依据此理论我们可以计算图像二阶导数，提取边缘。
//在一阶导数的极值位置，二阶导数为0.所以也可以利用这个特点来作为检测图像边缘的方法，但是二阶导数的0值不仅仅出现在边缘，
//它们也可能出现在无意义的位置，但我们可以过滤掉这些点。因为图像是二维的，需要在两个方向求导。

//Laplacian函数
//void cv::Laplacian(InputArray      src,
//     OutputArray            dst,
//     int                ddepth,
//     int               ksize = 1,
//     double            scale = 1,
//     double           delta = 0,
//     int     borderType = BORDER_DEFAULT
//)
//参数解释
//src: 输入图像
//dst : 输出图像
//ddepth : 图像深度
//ksize : 用于计算二阶导的kernel尺寸，必须是正奇数。
//scale : Laplacian算子的可选因子，有默认值1，此时没有应用缩放因子。
//delta : 存储目标图像前可选的delta值，有默认值0
//borderType : 用于推断边界像素的模式，有默认值BORDER_DEFAULT
//实际上，由于Laplacian使用了图像梯度，它内部调用了Sobel算子。
//高斯模糊 – 去噪声GaussianBlur()
//转换为灰度图像cvtColor()
//拉普拉斯 – 二阶导数计算Laplacian()
//取绝对值convertScaleAbs()
//显示结果
#include<opencv2/opencv.hpp>
#include<iostream>
#include<math.h>
using namespace cv;
int main(int argc, char** argv) {
	Mat src,dst, gray, dst1,dst2,dst3;
	src = imread("F:/PHOTO/dog.jpg");
	if (src.empty()) {
		printf("can not read the image../n");
		return -1;
	}
	namedWindow("input_img", CV_WINDOW_AUTOSIZE);
	imshow("input_img", src);
	//1 GaussianBlur 去噪
	GaussianBlur(src,dst,Size(3,3),0,0);
	//2 转灰度
	cvtColor(dst,gray,CV_BGR2GRAY);
	//3 Lapalacian 操作
	Laplacian(gray,dst1,CV_16S,3);
	//4 使用线性变换转换输入数组元素成8位无符号整型。
	convertScaleAbs(dst1, dst2);
	//5 进行阈值操作
	threshold(dst2,dst3,0,255,THRESH_OTSU|THRESH_BINARY );
	namedWindow("Laplacian_Img", CV_WINDOW_AUTOSIZE);
	imshow("Laplacian_Img",dst3);
	waitKey(0);
	return 0;
}
